<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yao Ding</title>
    <description>Yao's blog on everything about web technologies'</description>
    <link>https://yaodingyd.github.io/</link>
    <atom:link href="https://yaodingyd.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Oct 2017 17:53:13 +0000</pubDate>
    <lastBuildDate>Fri, 27 Oct 2017 17:53:13 +0000</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Mutation Observer Is Cool</title>
        <description>&lt;p&gt;Mutation Observer is a well-supported (&lt;a href=&quot;https://caniuse.com/#search=Mutation%20Observer&quot;&gt;CanIUse link&lt;/a&gt;) and very effcient API. Today I finally has a legit usecase for it.&lt;/p&gt;

&lt;h3 id=&quot;detecting-lazy-loaded-ad-is-inserted&quot;&gt;Detecting lazy-loaded ad is inserted&lt;/h3&gt;
&lt;p&gt;Today at work I run into this situation: on page there is a Google DFP ad and it is loaded in a iframe. I don’t have any knowledge of knowing it this ad is being inserted into DOM, for on DOM ready it is just a placeholder. I tried setting a timeout for it but it could get tricky and there is no guarantee for it would always work. Thus enters Mutation Observer.&lt;/p&gt;

&lt;p&gt;I would skip the code because there is always MDN. Later when I dig more into it, I found out &lt;a href=&quot;https://eager.io/blog/three-real-world-use-cases-for-mutation-observer/&quot;&gt;this article&lt;/a&gt; has included my usage. Also combining &lt;code class=&quot;highlighter-rouge&quot;&gt;contenteditable&lt;/code&gt;, it would make a greate WYSIWYG editor.&lt;/p&gt;

&lt;h3 id=&quot;more-usage&quot;&gt;More usage&lt;/h3&gt;

&lt;p&gt;There is something intereting in Vue as it uses Mutation Observer as a fallback for &lt;code class=&quot;highlighter-rouge&quot;&gt;promise&lt;/code&gt; to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MutationObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextTickHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;characterData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;timerFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;textNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// nextTickHandler is the hanlder for callbacks in Vue.nextTick(callback)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This works because handling is postponed and batched into subtree insertions with Mutation Observer.&lt;/p&gt;

&lt;h3 id=&quot;some-thoughts&quot;&gt;Some thoughts&lt;/h3&gt;

&lt;p&gt;Why isn’t a well-supported and efficeint API not that generally used? I think it’s because how the modern framework is designed: instead of keeping tracking of states with DOM, states is seperated into a dedicated JavaScript object. Also with virtual DOM, real DOM mutation triggered event might be delayed.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/mutation-observer-is-cool/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/mutation-observer-is-cool/</guid>
        
        <category>Web Fundamental</category>
        
        
      </item>
    
      <item>
        <title>Reading Virtual Dom Implementation</title>
        <description>&lt;p&gt;Some resources on how to implement virtual dom.&lt;/p&gt;

&lt;p&gt;https://github.com/creeperyang/blog/issues/33&lt;/p&gt;

&lt;p&gt;https://github.com/livoras/blog/issues/13&lt;/p&gt;

&lt;h2 id=&quot;terms&quot;&gt;Terms&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vnode&lt;/code&gt;&lt;/em&gt;: A abstract model of node, using POJO to represent a DOM node; usually have three properties: &lt;code class=&quot;highlighter-rouge&quot;&gt;tagName&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; for attributes, and &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; for children DOM nodes or plain text.
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;&lt;/em&gt;: function to convert to vnode; usually returns a virtual dom tree, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;vtree&lt;/code&gt;.
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;&lt;/em&gt;: function to compare two &lt;code class=&quot;highlighter-rouge&quot;&gt;vtree&lt;/code&gt; to get patches.
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt;&lt;/em&gt;: function to apply patches to real DOM.
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;&lt;/em&gt;: the process of turning virtual DOM element into a real DOM element.
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hydration&lt;/code&gt;&lt;/em&gt;: usually means to do rendering in server side, then apply &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; in client side.&lt;/p&gt;

&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;

&lt;p&gt;Once you have a set of patches, you could apply them immediately but it’s better to queue them and flush this queue at a fixed interval like 60 times per second. Only doing our DOM manipulation with the callback to requestAnimationFrame will give us a performance boost and minimize the number of DOM operations we do. We also call batch in before we apply our patches to squash our list of diffs to the minimal set of operations.&lt;/p&gt;

&lt;p&gt;The basic idea to use virtual dom is the same: use JavaScript object to represent DOM node and construct a tree based on vnode, whenever there is change on vnode, we diff the old and new tree, and only patch the diff results.&lt;/p&gt;

&lt;p&gt;There are two ways to do patching: first we do &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; and store patches in a queue, then do &lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt;; or we can do &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt; together.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/reading-virtual-dom-implementation/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/reading-virtual-dom-implementation/</guid>
        
        <category>Vue</category>
        
        
      </item>
    
      <item>
        <title>Reading Vue's Source Code</title>
        <description>&lt;p&gt;A couples of notes when I read through Vue’s source code.&lt;/p&gt;

&lt;h2 id=&quot;naming-convention&quot;&gt;Naming convention&lt;/h2&gt;

&lt;p&gt;About Vue instance properties naming convention:
Any related to DOM would have a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; prefix;
Any related to inner property, which user would not want to access at the first place would have a &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; prefix;
The rest of public properties and methods would have no prefixs.
All Vue instance methods/property would be extended on &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.prototype&lt;/code&gt; and prefixed with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;vue-instantiation&quot;&gt;Vue instantiation:&lt;/h2&gt;

&lt;p&gt;Each time instantiated with a new Vue instance, so we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. Essentially &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue&lt;/code&gt; is a constructor function, inside it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;vue._init&lt;/code&gt; function to instantiate a new Vue instance. Vue uses &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; as a reference (ViewModel)&lt;/p&gt;

&lt;h2 id=&quot;observer&quot;&gt;Observer&lt;/h2&gt;

&lt;p&gt;This whole &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; is already discussed in my other post. Vue uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; to make data reactive with ES5 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;. Also each reactive property has &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; to manage its &lt;code class=&quot;highlighter-rouge&quot;&gt;Dep&lt;/code&gt;, like DOM update. Each data change would push all &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; in a queue managed by &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; class. On &lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt;, the queue would be flushed and all &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; callback would be applied.&lt;/p&gt;

&lt;p&gt;Any reactive data changes -&amp;gt; dep.notify() -&amp;gt; watcher.update() -&amp;gt; queueWatcher() -&amp;gt; wait for nexttick to flush queue&lt;/p&gt;

&lt;h2 id=&quot;init&quot;&gt;Init&lt;/h2&gt;
&lt;p&gt;_init 
  has &lt;code class=&quot;highlighter-rouge&quot;&gt;el&lt;/code&gt; when initialized ? call public &lt;code class=&quot;highlighter-rouge&quot;&gt;$mount&lt;/code&gt; -&amp;gt; mountComponet -&amp;gt; intialize a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; -&amp;gt;  vm._update -&amp;gt; run patch, createElm, CreateComponent -&amp;gt; recursively create all children components -&amp;gt; mount all components&lt;/p&gt;

&lt;h2 id=&quot;render&quot;&gt;Render?&lt;/h2&gt;

&lt;p&gt;Vue uses template to compile to render function, or you can use your own render function. render function would call createElement to get a new vnode. Vnode to do patch -&amp;gt; createComponent -&amp;gt; create an instance and mount&lt;/p&gt;

&lt;p&gt;recursively mounted all children(componentInstance), then mount parent&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/reading-vue-source-code/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/reading-vue-source-code/</guid>
        
        <category>Vue</category>
        
        
      </item>
    
      <item>
        <title>Security: CSP and CORS</title>
        <description>&lt;p&gt;Today when I was working, I checked console log and saw 146 errors of something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Report Only] Refused to load the stylesheet ‘http://example.com’ because it violates the following Content Security Policy directive: “default-src https: ‘unsafe-inline’ ‘unsafe-eval’”. Note that ‘style-src’ was not explicitly set, so ‘default-src’ is used as a fallback.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I noticed there is a new item in header: &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy-Report-Only:default-src https: 'unsafe-inline' 'unsafe-eval'; report-uri https://example.com/reportingEndpoint&lt;/code&gt;. This enables &lt;em&gt;Content Security Policy&lt;/em&gt;, which in the case, report error only and doesn’t really block resources from loading.&lt;/p&gt;

&lt;h2 id=&quot;what-is-content-security-policy&quot;&gt;What is Content Security Policy&lt;/h2&gt;

&lt;p&gt;According to MDN:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use CSP, we can either enable this in the server side, that means adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt; HTTP header, or use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src 'self'; img-src https://*; child-src 'none';&quot;&amp;gt;&lt;/code&gt; meta tags in the HTML.&lt;/p&gt;

&lt;h2 id=&quot;whats-difference-with-cors&quot;&gt;What’s difference with CORS?&lt;/h2&gt;

&lt;p&gt;Same Origin Policy is the default policy for all browsers and it limits that a resource makes a cross-origin HTTP request when it requests a resource from a different domain, protocol, or port to its own. Basically when doing &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, you have to enable CORS for different origin, but not loading &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; tag when document first loads.&lt;/p&gt;

</description>
        <pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/security-CSP-and-CORS/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/security-CSP-and-CORS/</guid>
        
        <category>Web Fundamental</category>
        
        
      </item>
    
      <item>
        <title>About Cropping Image</title>
        <description>&lt;p&gt;When first thinking about cropping an image, I think of &lt;code class=&quot;highlighter-rouge&quot;&gt;clip&lt;/code&gt;, or the new &lt;code class=&quot;highlighter-rouge&quot;&gt;clip-path&lt;/code&gt;, but this doesn’t help crop the center of the image.&lt;/p&gt;

&lt;p&gt;Here is three ways of doing so:&lt;/p&gt;

&lt;h3 id=&quot;use-as-background-image&quot;&gt;Use as background-image&lt;/h3&gt;

&lt;p&gt;Pretty straight-forward:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;wrapper-parent-div-with-hidden-overflow&quot;&gt;Wrapper parent div with hidden overflow&lt;/h3&gt;

&lt;p&gt;Also self-explanatory:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;use-object-fit&quot;&gt;use object-fit&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;object-fit&lt;/code&gt; is an handy property specifies how a replaced element, such as an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, should be resized to fit its container.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;object-fit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;object-position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kind of like &lt;code class=&quot;highlighter-rouge&quot;&gt;background-size&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;background-position&lt;/code&gt;. Of course IE doesn’t support it, so you have to use the first method as fallback.&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/about-cropping-image/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/about-cropping-image/</guid>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>How JavaScript Modules work</title>
        <description>&lt;p&gt;Some resources on how modules works in JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;subject-on-how-nodes-commonjs-works&quot;&gt;Subject on how Node’s CommonJS works&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://fredkschott.com/post/2014/06/require-and-the-module-system/&quot;&gt;http://fredkschott.com/post/2014/06/require-and-the-module-system/&lt;/a&gt;
&lt;a href=&quot;https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/&quot;&gt;https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;nodes-module-source-code&quot;&gt;Node’s module source code&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nodejs/node/blob/master/lib/module.js&quot;&gt;github url&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;commonjs-specs&quot;&gt;CommonJS Specs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.1.1&quot;&gt;CommonJS’s wiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-requirejs-works&quot;&gt;How RequireJS works&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.quora.com/How-does-require-js-work-How-it-load-files-Does-it-make-ajax-call-to-load-files-or-any-other-way-Can-anyone-explain-it-clearly/answer/Gourab-Kar-2?srid=uk2Rp&quot;&gt;this answer&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Loading a file in requirejs is simply attaching a script tag with src to your mentioned filename. This is triggered by require () function. Now comes a beautiful feature. All the script tags have onchange event. When the file gets loaded, the onchange function is triggered and saved in a variable that will be used on demand by define () function. When all the dependencies are resolved, all the loaded files are arranged in there order of them being called and a map of it is created.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;You must have noticed the files that you can load by requirejs are AMD. The contents are enveloped in a define function and the function returns something. This prevents the variables / business objects to be exposed at window level. Everything you’ve written inside an AMD module is scoped to the define function and it is used when injected as an object in another function. When such files get loaded, the returned value is stored in the variable mentioned in point 1.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;amd-spec&quot;&gt;AMD spec&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&quot;&gt;AMDjs github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;applications&quot;&gt;Applications&lt;/h3&gt;

&lt;p&gt;Browserify would convert ES6 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; to CommonJS modules, since most browsers cannot support it yet.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/how-javascript-modules-work/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/how-javascript-modules-work/</guid>
        
        <category>How it works</category>
        
        
      </item>
    
      <item>
        <title>Charles Proxy FAQ</title>
        <description>&lt;p&gt;Some common problems I ran into using Charles Proxy.&lt;/p&gt;

&lt;h3 id=&quot;local-mapping-is-not-working&quot;&gt;Local mapping is not working&lt;/h3&gt;

&lt;p&gt;Check your recording. If there is a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;unknown&lt;/code&gt; HTTP request, then it’s served with HTTPS. After installing SSL certificate, go to &lt;em&gt;SSL Proxying Settings…&lt;/em&gt; in &lt;em&gt;Proxy&lt;/em&gt;, and add your host in &lt;em&gt;SSL Proxying&lt;/em&gt; tab. (Use &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; for add all hosts).&lt;/p&gt;

&lt;h3 id=&quot;mobile-proxy&quot;&gt;Mobile proxy&lt;/h3&gt;

&lt;p&gt;Again, probably with HTTPS proxy. Install SSL certificate first, then follow this &lt;a href=&quot;https://stackoverflow.com/questions/17823434/ssl-proxy-charles-and-android-trouble&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-charles-with-livereload&quot;&gt;Use Charles with livereload&lt;/h3&gt;

&lt;p&gt;There is one solution listed in &lt;a href=&quot;http://www.mikefahy.com/blog/files/configuring-charles-and-livereload-to-work-together.html&quot;&gt;this post&lt;/a&gt; but it seems be to outdated for now. Since 3.0, Charles starts to support websockets so I find the following solution working for me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In main menu, go to Proxy &amp;gt; Proxy Setting&lt;/li&gt;
  &lt;li&gt;Enable &lt;em&gt;SOCKS Proxy&lt;/em&gt; in first “Proxies” tab.&lt;/li&gt;
  &lt;li&gt;Check &lt;em&gt;Use SOCKS proxy&lt;/em&gt; in “macOS” tab if applicable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/charles-proxy-faq/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/charles-proxy-faq/</guid>
        
        <category>Tool</category>
        
        
      </item>
    
      <item>
        <title>Stream and Buffer in Node</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; is what node uses to handle raw chunks of binary data, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;fs.readFile()&lt;/code&gt;, that would take the file into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt;, and reading it all at once. &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, on the other hand, reads data at chunks. &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt; are all &lt;code class=&quot;highlighter-rouge&quot;&gt;EventEmitter&lt;/code&gt; class:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This object was simply an EventEmitter that added a special pipe() method to do the streaming magic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; are all &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, so they can listen to events and get &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe&lt;/code&gt;d.&lt;/p&gt;

&lt;p&gt;Libraries like though2 can make &lt;code class=&quot;highlighter-rouge&quot;&gt;stream&lt;/code&gt; out of function so we can use it to handle streaming data. In other words, anything ‘abstract interface’ in a &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe&lt;/code&gt; call needs to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;stream.transform&lt;/code&gt; (most of the time), and we use though2 to wrap a function to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;stream.transform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt; generally handle &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, but it can also be an object stream, where a POJO gets streamed. To do this we enable &lt;code class=&quot;highlighter-rouge&quot;&gt;objectMode: true&lt;/code&gt;, in though2 would be &lt;code class=&quot;highlighter-rouge&quot;&gt;var stream = through2({ objectMode: true }, function(chunk, enc, callback) { })&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is how Gulp is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt; inside, which would be a Vinyl object stream.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/stream-and-buffer/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/stream-and-buffer/</guid>
        
        <category>Node</category>
        
        
      </item>
    
      <item>
        <title>Dependency Injection Finally Makes Senses For Me (in Angular 1)</title>
        <description>&lt;p&gt;I started learning Dependency Injection(DI) with Angular 1 and frankly speaking, it was not a very pleasant experiences for me at the start. Angular uses all kinds of jargons in one short &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection&quot;&gt;article&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;provider&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;$provider&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$provider.service()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$provider.factory()&lt;/code&gt;, with some actually referring to the one of program paradiams and some are Angular’s directives, I was totally confused at that time.&lt;/p&gt;

&lt;p&gt;Surly I have no problem understanding it now. To quote from Laravel’s offical documents:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dependency injection is a fancy phrase that essentially means this: class dependencies are “injected” into the class via the constructor or, in some cases, “setter” methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the more I looked into how Laravel handles DI, the more I see how Angular is truly a MVC framework.&lt;/p&gt;

&lt;p&gt;Laravel has two concepts around DI: &lt;code class=&quot;highlighter-rouge&quot;&gt;service container&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;service provider&lt;/code&gt;. Basically in &lt;code class=&quot;highlighter-rouge&quot;&gt;service provider&lt;/code&gt; we ‘register’ (or ‘define’) a ‘service’, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;service container&lt;/code&gt; to do &lt;code class=&quot;highlighter-rouge&quot;&gt;App::bind&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;App::singleton&lt;/code&gt;, and later Laraval can use type hinting to do DI. Angular follows the same concept here: we use &lt;code class=&quot;highlighter-rouge&quot;&gt;$provide&lt;/code&gt; to define a bunch of ‘service’, or use its shorcuts(&lt;code class=&quot;highlighter-rouge&quot;&gt;module.provider&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;module.service&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;module.factory&lt;/code&gt;); later we inject all these dependency with either an array in the callback
&lt;code class=&quot;highlighter-rouge&quot;&gt;someModule.controller('MyController', ['$scope', 'dep1', 'dep2', function($scope, dep1, dep2) {...})&lt;/code&gt;, or use &lt;code class=&quot;highlighter-rouge&quot;&gt;MyController.$inject = ['$scope', 'dep1', 'dep2'];&lt;/code&gt;. One thing to notice is that all ‘service’ in Angular are singletons.&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/dependency-injection-finally-makes-sense-for-me/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/dependency-injection-finally-makes-sense-for-me/</guid>
        
        <category>Node</category>
        
        
      </item>
    
      <item>
        <title>Most Depressing Part in Front-end Dev</title>
        <description>&lt;p&gt;Use consistent &lt;code class=&quot;highlighter-rouge&quot;&gt;require/import&lt;/code&gt;. Use either commonjs require or ES6 import throughout your whole project. This will bite your ass something when you use &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; for client source then switch to use &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; in server code but forget that you have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;require('important-module').default&lt;/code&gt; for all these &lt;code class=&quot;highlighter-rouge&quot;&gt;export default important-module&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Webpack cannot pack non-node-native code. This will make you search for all your modules that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;node-gyp&lt;/code&gt; bindings and replace them with all JavaScript counterparts.&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://yaodingyd.github.io/blog/most-depressing-part-in-front-end-tooling/</link>
        <guid isPermaLink="true">https://yaodingyd.github.io/blog/most-depressing-part-in-front-end-tooling/</guid>
        
        <category>Node</category>
        
        
      </item>
    
  </channel>
</rss>
